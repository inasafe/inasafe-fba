version: '2.1'
volumes:
  repo-volume:
  osm-postgis-data:
  import_done:
  import_queue:
  cache:
  osm_data:

services:
  db:
    # About the postgresql version, it should match in the dockerfile of docker-imposm3
    image: kartoza/postgis:11.0-2.5
    restart: always
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASS=${POSTGRES_PASS}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - ALLOW_IP_RANGE=${POSTGRES_HBA_RANGE}
      - IP_LIST=${ALLOW_LISTEN_RANGE}
      - ARCHIVE_BASE_URL=${ARCHIVE_BASE_URL}
      - POSTGREST_BASE_URL=${POSTGREST_BASE_URL}
      - REPO_ROOT=${REPO_ROOT}
    volumes:
     - osm-postgis-data:/var/lib/postgresql
     - repo-volume:/opt/inasafe-fba
    ports:
      - "${POSTGRES_PORT}:5432"
    network_mode: bridge

  osm_downloader:
    image: kartoza/docker-osm:pbf-downloader
    volumes:
      # These are sharable to other containers
      - osm_data:/home/settings
    environment:
      # Read the README in docker-osm-pbf
      - CONTINENT=${CONTINENT}
      - COUNTRY=${COUNTRY}
      - BASE_URL=${PBF_URL}
      - MAPPING_URL=${MAPPING_URL}
      - GEOJSON_URL=${GEOJSON_URL}
    network_mode: bridge

  imposm:
    image: kartoza/docker-osm:imposm-latest
    restart: always
    volumes:
      - osm_data:/home/settings
      - import_done:/home/import_done
      - import_queue:/home/import_queue
      - cache:/home/cache
    links:
      - db:db
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASS=${POSTGRES_PASS}
      - POSTGRES_PORT=${PG_PORT}
      - POSTGRES_HOST=db
      # seconds between 2 executions of the script
      # if 0, then no update will be done, only the first initial import from the PBF
      - TIME=${UPDATE_TIME}
      # folder for settings (with *.json and *.sql)
      - SETTINGS=settings
      # folder for caching
      - CACHE=cache
      # folder for diff which has been imported
      - IMPORT_DONE=import_done
      # folder for diff which hasn't been imported yet
      - IMPORT_QUEUE=import_queue
      # it can be 3857
      - SRID=${TABLE_SRID}
      # see http://imposm.org/docs/imposm3/latest/tutorial.html#optimize
      - OPTIMIZE=false
      # see http://imposm.org/docs/imposm3/latest/tutorial.html#deploy-production-tables
      - DBSCHEMA_PRODUCTION=${DB_SCHEMA}
      # http://imposm.org/docs/imposm3/latest/tutorial.html#deploy-production-tables
      - DBSCHEMA_IMPORT=${DB_SCHEMA_IMPORT}
      # http://imposm.org/docs/imposm3/latest/tutorial.html#deploy-production-tables
      - DBSCHEMA_BACKUP=${DB_SCHEMA_BACKUP}
      # Install some styles if you are using the default mapping. It can be 'yes' or 'no'
      - QGIS_STYLE=${QGIS_STYLE_BOOLEAN}
      # Use clip in the database
      - CLIP=${CLIP_BOOLEAN}
    command: bash -c "while [ ! -f /home/settings/country.pbf ] ; do sleep 1; done && python3 -u /home/importer.py"
    network_mode: bridge

  osmupdate:
    image: kartoza/docker-osm:osmupdate-latest
    restart: always
    volumes:
      # These are sharable to other containers
      - osm_data:/home/settings
      - import_done:/home/import_done
      - import_queue:/home/import_queue
      - cache:/home/cache
    links:
      - db:db

    environment:
      # These are all currently the defaults but listed here for your
      # convenience if you want to change them
      # the maximum time range to assemble a cumulated changefile.
      - MAX_DAYS=${MAX_RANGE}
      # osmupdate uses a combination of minutely, hourly and daily changefiles. This value can be minute, hour, day or sporadic.
      - DIFF=${DIFF_VAL}
      # argument to determine the maximum number of parallely processed changefiles.
      - MAX_MERGE=${MAX_MERGE_TIME}
      # define level for gzip compression. values between 1 (low compression but fast) and 9 (high compression but slow)
      - COMPRESSION_LEVEL=${COMPRESS_LEVEL}
      # change the URL to use a custom URL to fetch regional file updates.
      - BASE_URL=http://planet.openstreetmap.org/replication/
      # folder for diff which hasn't been imported yet
      - IMPORT_QUEUE=import_queue
      # folder for diff which has been imported
      - IMPORT_DONE=import_done
      # seconds between 2 executions of the script
      # if 0, then no update will be done, only the first initial import from the PBF
      - TIME=${UPDATE_TIME}
    command: bash -c "while [ ! -f /home/settings/country.pbf ] ; do sleep 1; done && python3 -u /home/download.py"
    network_mode: bridge
#  osmenrich:
#    image: kartoza/docker-osm:osmenrich-latest
#    restart: always
#    volumes:
#      - osm_data:/home/settings
#      - import_done:/home/import_done
#      - import_queue:/home/import_queue
#      - cache:/home/cache
#    links:
#      - db:db
#    environment:
#      - POSTGRES_DB=${POSTGRES_DB}
#      - POSTGRES_USER=${POSTGRES_USER}
#      - POSTGRES_PASS=${POSTGRES_PASS}
#      - POSTGRES_PORT=${PG_PORT}
#      - POSTGRES_HOST=db
#      # These are all currently the defaults but listed here for your
#      # convenience if you want to change them
#      # folder for diff which hasn't been imported yet
#      - IMPORT_QUEUE=import_queue
#      # folder for diff which has been imported
#      - IMPORT_DONE=import_done
#      # seconds between 2 executions of the script
#      # if 0, then no update will be done, only the first initial import from the PBF
#      - TIME=${UPDATE_TIME}

  postgrest:
    image: postgrest/postgrest
    environment:
      PGRST_DB_URI: postgres://${POSTGRES_USER}:${POSTGRES_PASS}@db:5432/${POSTGRES_DB}
      PGRST_DB_SCHEMA: public
      PGRST_DB_ANON_ROLE: ${POSTGRES_USER}
      PGRST_SERVER_PROXY_URI: ${PGRST_SERVER_PROXY_URI}
    links:
      - db:db
    ports:
      - "${PGRST_PORT}:3000"
    network_mode: bridge

  swagger:
    image: swaggerapi/swagger-ui
    ports:
      - "${SWAGGER_UI_PORT}:8080"
    environment:
      API_URL: ${PGRST_SERVER_PROXY_URI}
    network_mode: bridge

  testrunner:
      image: python:3
      entrypoint: ${REPO_ROOT}/fixtures/tests/scripts/testrunner-entrypoint.sh
      working_dir: ${REPO_ROOT}/fixtures/tests
      command: tail -f /dev/null
      environment:
        POSTGRES_DB: ${POSTGRES_DB}
        POSTGRES_USER: ${POSTGRES_USER}
        POSTGRES_PASS: ${POSTGRES_PASS}
        POSTGRES_PORT: ${PG_PORT}
        POSTGRES_HOST: db
        REPO_ROOT: ${REPO_ROOT}
        TEST_PACKAGE_ROOT: ${REPO_ROOT}/fixtures/tests
      links:
        - db
      volumes:
        - repo-volume:${REPO_ROOT}
      network_mode: bridge
